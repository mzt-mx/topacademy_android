<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/MainActivity.kt" />
              <option name="originalContent" value="package com.example.topacademy_android&#10;&#10;import android.os.Bundle&#10;import android.widget.Toast&#10;import androidx.activity.viewModels&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import com.bumptech.glide.Glide&#10;import com.example.topacademy_android.databinding.ActivityMainBinding&#10;import com.example.topacademy_android.feature_forecast.presentation.ForecastItemToHourly&#10;import com.example.topacademy_android.feature_forecast.presentation.HourlyForecast&#10;import com.example.topacademy_android.feature_forecast.presentation.WeeklyForecast&#10;import com.example.topacademy_android.feature_forecast.presentation.adapters.HourlyForecastAdapter&#10;import com.example.topacademy_android.feature_forecast.presentation.adapters.WeeklyForecastAdapter&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.ForecastItem&#10;import com.example.topacademy_android.feature_forecast.data.OneCallResponse&#10;import com.example.topacademy_android.feature_forecast.presentation.WeatherViewModel&#10;import com.example.topacademy_android.feature_forecast.data.WeatherRepositoryImpl&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;import kotlinx.coroutines.*&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;class MainActivity : AppCompatActivity() {&#10;    private lateinit var binding: ActivityMainBinding&#10;    private lateinit var hourlyAdapter: HourlyForecastAdapter&#10;    private lateinit var weeklyAdapter: WeeklyForecastAdapter&#10;&#10;    private val viewModel: WeatherViewModel by viewModels {&#10;        object : androidx.lifecycle.ViewModelProvider.Factory {&#10;            override fun &lt;T : androidx.lifecycle.ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;                return WeatherViewModel(WeatherRepositoryImpl.create()) as T&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        binding = ActivityMainBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;        setSupportActionBar(binding.topAppBar)&#10;        hourlyAdapter = HourlyForecastAdapter(emptyList())&#10;        weeklyAdapter = WeeklyForecastAdapter(emptyList())&#10;        binding.rvHourly.layoutManager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)&#10;        binding.rvHourly.adapter = hourlyAdapter&#10;        binding.rvWeekly.layoutManager = LinearLayoutManager(this)&#10;        binding.rvWeekly.adapter = weeklyAdapter&#10;&#10;        viewModel.fetchForecast()&#10;        viewModel.forecast.observe(this) { response -&gt;&#10;            if (response != null) {&#10;                updateHourlyFromForecast(response)&#10;                updateWeeklyFromForecast(response)&#10;            }&#10;        }&#10;        viewModel.error.observe(this) { err -&gt;&#10;            if (!err.isNullOrEmpty())&#10;                Toast.makeText(this, err, Toast.LENGTH_LONG).show()&#10;        }&#10;    }&#10;&#10;    private fun updateCurrentWeatherUI(currentWeather: CurrentWeatherResponse) {&#10;        binding.tvCurrentTemp.text = &quot;${currentWeather.main.temp.toInt()}°&quot;&#10;        binding.tvCurrentCondition.text = currentWeather.weather.firstOrNull()?.description ?: &quot;N/A&quot;&#10;        binding.tvLocation.text = currentWeather.name&#10;        val iconCode = currentWeather.weather.firstOrNull()?.icon&#10;        loadWeatherIcon(binding.imgCurrentWeatherIcon, iconCode)&#10;        binding.tvHumidity.text = &quot;Влажность: ${currentWeather.main.humidity}%&quot;&#10;        binding.tvPressure.text = &quot;Давление: ${currentWeather.main.pressure} гПа&quot;&#10;        binding.tvWindSpeed.text = &quot;Ветер: ${currentWeather.wind.speed} м/с&quot;&#10;        Toast.makeText(&#10;            this,&#10;            &quot;${currentWeather.name}, ${currentWeather.main.temp}°C, ${currentWeather.weather.firstOrNull()?.description}, &quot; +&#10;                    &quot;${currentWeather.main.humidity}%, ${currentWeather.main.pressure} гПа, ${currentWeather.wind.speed} м/с&quot;,&#10;            Toast.LENGTH_LONG&#10;        ).show()&#10;    }&#10;&#10;    private fun updateHourlyForecast(response: WeatherResponse) {&#10;        val hourlyList = response.list.map { ForecastItemToHourly(it) }&#10;        hourlyAdapter.updateData(hourlyList)&#10;    }&#10;&#10;    private fun updateWeeklyForecast(response: WeatherResponse) {&#10;        val dailyMap = response.list.groupBy { it.dt_txt.substring(0, 10) }&#10;        val weeklyList = dailyMap.map { entry -&gt;&#10;            val day = entry.key&#10;            val temps = entry.value.map { it.main.temp }&#10;            val minTemp = temps.minOrNull()?.toInt() ?: 0&#10;            val maxTemp = temps.maxOrNull()?.toInt() ?: 0&#10;            val iconCode = entry.value.first().weather.firstOrNull()?.icon&#10;            val description = entry.value.first().weather.firstOrNull()?.description&#10;            val precip = entry.value.mapNotNull { it.javaClass.methods.find { m -&gt; m.name == &quot;getRain&quot; }?.invoke(it) }&#10;                .mapNotNull { rainObj -&gt;&#10;                    try {&#10;                        val field = rainObj?.javaClass?.getDeclaredField(&quot;_1h&quot;)&#10;                        field?.isAccessible = true&#10;                        (field?.get(rainObj) as? Number)?.toInt()&#10;                    } catch (e: Exception) { null }&#10;                }.sum()&#10;            val windAvg = entry.value.mapNotNull { it.javaClass.methods.find { m -&gt; m.name == &quot;getWind&quot; }?.invoke(it) }&#10;                .mapNotNull { windObj -&gt;&#10;                    try {&#10;                        val field = windObj?.javaClass?.getDeclaredField(&quot;speed&quot;)&#10;                        field?.isAccessible = true&#10;                        (field?.get(windObj) as? Number)?.toDouble()&#10;                    } catch (e: Exception) { null }&#10;                }.average().takeIf { !it.isNaN() } ?: 0.0&#10;            WeeklyForecast(day, minTemp, maxTemp, iconCode, description, precip, windAvg)&#10;        }&#10;        weeklyAdapter.updateData(weeklyList)&#10;    }&#10;&#10;    private fun loadWeatherIcon(imageView: android.widget.ImageView, iconCode: String?) {&#10;        if (iconCode == null) return&#10;        val iconUrl = &quot;https://openweathermap.org/img/wn/${iconCode}@2x.png&quot;&#10;        Glide.with(imageView.context).load(iconUrl).into(imageView)&#10;    }&#10;&#10;    private fun updateHourlyFromForecast(response: WeatherResponse) {&#10;        val sdfInput = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val sdfOutput = SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault())&#10;        val list = response.list.take(12).map {&#10;            val date = sdfInput.parse(it.dt_txt)&#10;            com.example.topacademy_android.feature_forecast.presentation.HourlyForecast(&#10;                hour = if (date != null) sdfOutput.format(date) else it.dt_txt,&#10;                temp = it.main.temp.toInt(),&#10;                iconCode = it.weather.firstOrNull()?.icon&#10;            )&#10;        }&#10;        hourlyAdapter.updateData(list)&#10;    }&#10;&#10;    private fun updateWeeklyFromForecast(response: WeatherResponse) {&#10;        val sdf = SimpleDateFormat(&quot;EEE&quot;, Locale.getDefault())&#10;        val grouped = response.list.groupBy { it.dt_txt.substring(0, 10) }&#10;        val list = grouped.map { (date, items) -&gt;&#10;            val minTemp = items.minOfOrNull { it.main.temp }?.toInt() ?: 0&#10;            val maxTemp = items.maxOfOrNull { it.main.temp }?.toInt() ?: 0&#10;            val iconCode = items.firstOrNull()?.weather?.firstOrNull()?.icon&#10;            val description = items.firstOrNull()?.weather?.firstOrNull()?.description&#10;            com.example.topacademy_android.feature_forecast.presentation.WeeklyForecast(&#10;                day = sdf.format(java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(date)!!),&#10;                minTemp = minTemp,&#10;                maxTemp = maxTemp,&#10;                iconCode = iconCode,&#10;                description = description,&#10;                precip = null,&#10;                wind = null&#10;            )&#10;        }.take(7)&#10;        weeklyAdapter.updateData(list)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android&#10;&#10;import android.os.Bundle&#10;import android.widget.Toast&#10;import androidx.activity.viewModels&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import com.bumptech.glide.Glide&#10;import com.example.topacademy_android.databinding.ActivityMainBinding&#10;import com.example.topacademy_android.feature_forecast.presentation.ForecastItemToHourly&#10;import com.example.topacademy_android.feature_forecast.presentation.HourlyForecast&#10;import com.example.topacademy_android.feature_forecast.presentation.WeeklyForecast&#10;import com.example.topacademy_android.feature_forecast.presentation.adapters.HourlyForecastAdapter&#10;import com.example.topacademy_android.feature_forecast.presentation.adapters.WeeklyForecastAdapter&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.ForecastItem&#10;import com.example.topacademy_android.feature_forecast.data.OneCallResponse&#10;import com.example.topacademy_android.feature_forecast.presentation.WeatherViewModel&#10;import com.example.topacademy_android.feature_forecast.data.WeatherRepositoryImpl&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;import kotlinx.coroutines.*&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;class MainActivity : AppCompatActivity() {&#10;    private lateinit var binding: ActivityMainBinding&#10;    private lateinit var hourlyAdapter: HourlyForecastAdapter&#10;    private lateinit var weeklyAdapter: WeeklyForecastAdapter&#10;&#10;    private val viewModel: WeatherViewModel by viewModels {&#10;        object : androidx.lifecycle.ViewModelProvider.Factory {&#10;            override fun &lt;T : androidx.lifecycle.ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;                return WeatherViewModel(WeatherRepositoryImpl.create()) as T&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        binding = ActivityMainBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;        setSupportActionBar(binding.topAppBar)&#10;        hourlyAdapter = HourlyForecastAdapter(emptyList())&#10;        weeklyAdapter = WeeklyForecastAdapter(emptyList())&#10;        binding.rvHourly.layoutManager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)&#10;        binding.rvHourly.adapter = hourlyAdapter&#10;        binding.rvWeekly.layoutManager = LinearLayoutManager(this)&#10;        binding.rvWeekly.adapter = weeklyAdapter&#10;&#10;        viewModel.fetchForecast()&#10;        viewModel.forecast.observe(this) { response -&gt;&#10;            if (response != null) {&#10;                updateHourlyFromForecast(response)&#10;                updateWeeklyFromForecast(response)&#10;            }&#10;        }&#10;        viewModel.error.observe(this) { err -&gt;&#10;            if (!err.isNullOrEmpty())&#10;                Toast.makeText(this, err, Toast.LENGTH_LONG).show()&#10;        }&#10;        // Получаем и отображаем текущую погоду для Москвы&#10;        viewModel.fetchCurrentWeather(&quot;Москва&quot;, units = &quot;metric&quot;, lang = &quot;ru&quot;)&#10;        viewModel.currentWeather.observe(this) { currentWeather -&gt;&#10;            if (currentWeather != null) {&#10;                updateCurrentWeatherUI(currentWeather)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun updateCurrentWeatherUI(currentWeather: CurrentWeatherResponse) {&#10;        binding.tvCurrentTemp.text = &quot;${currentWeather.main.temp.toInt()}°&quot;&#10;        binding.tvCurrentCondition.text = currentWeather.weather.firstOrNull()?.description ?: &quot;N/A&quot;&#10;        binding.tvLocation.text = currentWeather.name&#10;        val iconCode = currentWeather.weather.firstOrNull()?.icon&#10;        loadWeatherIcon(binding.imgCurrentWeatherIcon, iconCode)&#10;        binding.tvHumidity.text = &quot;Влажность: ${currentWeather.main.humidity}%&quot;&#10;        binding.tvPressure.text = &quot;Давление: ${currentWeather.main.pressure} гПа&quot;&#10;        binding.tvWindSpeed.text = &quot;Ветер: ${currentWeather.wind.speed} м/с&quot;&#10;        Toast.makeText(&#10;            this,&#10;            &quot;${currentWeather.name}, ${currentWeather.main.temp}°C, ${currentWeather.weather.firstOrNull()?.description}, &quot; +&#10;                    &quot;${currentWeather.main.humidity}%, ${currentWeather.main.pressure} гПа, ${currentWeather.wind.speed} м/с&quot;,&#10;            Toast.LENGTH_LONG&#10;        ).show()&#10;    }&#10;&#10;    private fun updateHourlyForecast(response: WeatherResponse) {&#10;        val hourlyList = response.list.map { ForecastItemToHourly(it) }&#10;        hourlyAdapter.updateData(hourlyList)&#10;    }&#10;&#10;    private fun updateWeeklyForecast(response: WeatherResponse) {&#10;        val dailyMap = response.list.groupBy { it.dt_txt.substring(0, 10) }&#10;        val weeklyList = dailyMap.map { entry -&gt;&#10;            val day = entry.key&#10;            val temps = entry.value.map { it.main.temp }&#10;            val minTemp = temps.minOrNull()?.toInt() ?: 0&#10;            val maxTemp = temps.maxOrNull()?.toInt() ?: 0&#10;            val iconCode = entry.value.first().weather.firstOrNull()?.icon&#10;            val description = entry.value.first().weather.firstOrNull()?.description&#10;            val precip = entry.value.mapNotNull { it.javaClass.methods.find { m -&gt; m.name == &quot;getRain&quot; }?.invoke(it) }&#10;                .mapNotNull { rainObj -&gt;&#10;                    try {&#10;                        val field = rainObj?.javaClass?.getDeclaredField(&quot;_1h&quot;)&#10;                        field?.isAccessible = true&#10;                        (field?.get(rainObj) as? Number)?.toInt()&#10;                    } catch (e: Exception) { null }&#10;                }.sum()&#10;            val windAvg = entry.value.mapNotNull { it.javaClass.methods.find { m -&gt; m.name == &quot;getWind&quot; }?.invoke(it) }&#10;                .mapNotNull { windObj -&gt;&#10;                    try {&#10;                        val field = windObj?.javaClass?.getDeclaredField(&quot;speed&quot;)&#10;                        field?.isAccessible = true&#10;                        (field?.get(windObj) as? Number)?.toDouble()&#10;                    } catch (e: Exception) { null }&#10;                }.average().takeIf { !it.isNaN() } ?: 0.0&#10;            WeeklyForecast(day, minTemp, maxTemp, iconCode, description, precip, windAvg)&#10;        }&#10;        weeklyAdapter.updateData(weeklyList)&#10;    }&#10;&#10;    private fun loadWeatherIcon(imageView: android.widget.ImageView, iconCode: String?) {&#10;        if (iconCode == null) return&#10;        val iconUrl = &quot;https://openweathermap.org/img/wn/${iconCode}@2x.png&quot;&#10;        Glide.with(imageView.context).load(iconUrl).into(imageView)&#10;    }&#10;&#10;    private fun updateHourlyFromForecast(response: WeatherResponse) {&#10;        val sdfInput = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val sdfOutput = SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault())&#10;        val list = response.list.take(12).map {&#10;            val date = sdfInput.parse(it.dt_txt)&#10;            com.example.topacademy_android.feature_forecast.presentation.HourlyForecast(&#10;                hour = if (date != null) sdfOutput.format(date) else it.dt_txt,&#10;                temp = it.main.temp.toInt(),&#10;                iconCode = it.weather.firstOrNull()?.icon&#10;            )&#10;        }&#10;        hourlyAdapter.updateData(list)&#10;    }&#10;&#10;    private fun updateWeeklyFromForecast(response: WeatherResponse) {&#10;        val sdf = SimpleDateFormat(&quot;EEE&quot;, Locale.getDefault())&#10;        val grouped = response.list.groupBy { it.dt_txt.substring(0, 10) }&#10;        val list = grouped.map { (date, items) -&gt;&#10;            val minTemp = items.minOfOrNull { it.main.temp }?.toInt() ?: 0&#10;            val maxTemp = items.maxOfOrNull { it.main.temp }?.toInt() ?: 0&#10;            val iconCode = items.firstOrNull()?.weather?.firstOrNull()?.icon&#10;            val description = items.firstOrNull()?.weather?.firstOrNull()?.description&#10;            com.example.topacademy_android.feature_forecast.presentation.WeeklyForecast(&#10;                day = sdf.format(java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(date)!!),&#10;                minTemp = minTemp,&#10;                maxTemp = maxTemp,&#10;                iconCode = iconCode,&#10;                description = description,&#10;                precip = null,&#10;                wind = null&#10;            )&#10;        }.take(7)&#10;        weeklyAdapter.updateData(list)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/WeeklyForecast.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/WeeklyForecast.kt" />
              <option name="updatedContent" value="package com.example.topacademy_android&#10;&#10;data class WeeklyForecast(&#10;    val day: String,&#10;    val minTemp: Int,&#10;    val maxTemp: Int,&#10;    val iconCode: String?,&#10;    val description: String?,&#10;    val precip: Int?,&#10;    val wind: Double?&#10;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/ApiKeys.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/ApiKeys.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;object ApiKeys {&#10;    const val OPEN_WEATHER = &quot;7bda70b6c3d8e85ea794b243d26d1fe5&quot;&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;object ApiKeys {&#10;    const val OPEN_WEATHER = &quot;8451d3a5d9ac315e24150c8667d8683f&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/OneCallResponse.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/OneCallResponse.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import com.google.gson.annotations.SerializedName&#10;&#10;data class OneCallResponse(&#10;    @SerializedName(&quot;hourly&quot;) val hourly: List&lt;HourlyForecast&gt;?,&#10;    @SerializedName(&quot;daily&quot;) val daily: List&lt;DailyForecast&gt;?&#10;)&#10;&#10;data class HourlyForecast(&#10;    @SerializedName(&quot;dt&quot;) val dt: Long,&#10;    @SerializedName(&quot;temp&quot;) val temp: Double,&#10;    @SerializedName(&quot;weather&quot;) val weather: List&lt;OneCallWeatherDescription&gt;&#10;)&#10;&#10;data class DailyForecast(&#10;    @SerializedName(&quot;dt&quot;) val dt: Long,&#10;    @SerializedName(&quot;temp&quot;) val temp: Temp,&#10;    @SerializedName(&quot;weather&quot;) val weather: List&lt;OneCallWeatherDescription&gt;&#10;)&#10;&#10;data class Temp(&#10;    @SerializedName(&quot;day&quot;) val day: Double,&#10;    @SerializedName(&quot;min&quot;) val min: Double,&#10;    @SerializedName(&quot;max&quot;) val max: Double&#10;)&#10;&#10;data class OneCallWeatherDescription(&#10;    @SerializedName(&quot;main&quot;) val main: String?,&#10;    @SerializedName(&quot;description&quot;) val description: String?&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import com.google.gson.annotations.SerializedName&#10;&#10;data class OneCallResponse(&#10;    @SerializedName(&quot;hourly&quot;) val hourly: List&lt;HourlyForecast&gt;?,&#10;    @SerializedName(&quot;daily&quot;) val daily: List&lt;DailyForecast&gt;?&#10;)&#10;&#10;data class HourlyForecast(&#10;    @SerializedName(&quot;dt&quot;) val dt: Long,&#10;    @SerializedName(&quot;temp&quot;) val temp: Double,&#10;    @SerializedName(&quot;weather&quot;) val weather: List&lt;OneCallWeatherDescription&gt;&#10;)&#10;&#10;data class DailyForecast(&#10;    @SerializedName(&quot;dt&quot;) val dt: Long,&#10;    @SerializedName(&quot;temp&quot;) val temp: Temp,&#10;    @SerializedName(&quot;weather&quot;) val weather: List&lt;OneCallWeatherDescription&gt;&#10;)&#10;&#10;data class Temp(&#10;    @SerializedName(&quot;day&quot;) val day: Double,&#10;    @SerializedName(&quot;min&quot;) val min: Double,&#10;    @SerializedName(&quot;max&quot;) val max: Double&#10;)&#10;&#10;data class OneCallWeatherDescription(&#10;    @SerializedName(&quot;main&quot;) val main: String?,&#10;    @SerializedName(&quot;description&quot;) val description: String?,&#10;    @SerializedName(&quot;icon&quot;) val icon: String?&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/WeatherApi.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/WeatherApi.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;interface WeatherApi {&#10;    @GET(&quot;forecast&quot;)&#10;    suspend fun getForecast(&#10;        @Query(&quot;q&quot;) city: String,&#10;        @Query(&quot;units&quot;) units: String = &quot;metric&quot;,&#10;        @Query(&quot;lang&quot;) lang: String = &quot;en&quot;&#10;    ): WeatherResponse&#10;&#10;    @GET(&quot;weather&quot;)&#10;    suspend fun getCurrentWeather(&#10;        @Query(&quot;q&quot;) city: String,&#10;        @Query(&quot;units&quot;) units: String = &quot;metric&quot;,&#10;        @Query(&quot;lang&quot;) lang: String = &quot;en&quot;&#10;    ): CurrentWeatherResponse&#10;&#10;    @GET(&quot;3.0/onecall&quot;)&#10;    suspend fun getOneCallForecast(&#10;        @Query(&quot;lat&quot;) lat: Double,&#10;        @Query(&quot;lon&quot;) lon: Double,&#10;        @Query(&quot;exclude&quot;) exclude: String = &quot;minutely,alerts&quot;,&#10;        @Query(&quot;units&quot;) units: String = &quot;metric&quot;,&#10;        @Query(&quot;lang&quot;) lang: String = &quot;en&quot;&#10;    ): OneCallResponse&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;interface WeatherApi {&#10;    @GET(&quot;forecast&quot;)&#10;    suspend fun getForecast(&#10;        @Query(&quot;q&quot;) city: String,&#10;        @Query(&quot;units&quot;) units: String = &quot;metric&quot;,&#10;        @Query(&quot;lang&quot;) lang: String = &quot;en&quot;&#10;    ): WeatherResponse&#10;&#10;    @GET(&quot;weather&quot;)&#10;    suspend fun getCurrentWeather(&#10;        @Query(&quot;q&quot;) city: String,&#10;        @Query(&quot;units&quot;) units: String = &quot;metric&quot;,&#10;        @Query(&quot;lang&quot;) lang: String = &quot;en&quot;&#10;    ): CurrentWeatherResponse&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/WeatherRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/WeatherRepositoryImpl.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import com.example.topacademy_android.feature_forecast.domain.WeatherRepository&#10;import okhttp3.Interceptor&#10;import okhttp3.OkHttpClient&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;class WeatherRepositoryImpl(private val api: WeatherApi) : com.example.topacademy_android.feature_forecast.domain.WeatherRepository {&#10;    override suspend fun getCurrentWeather(city: String, units: String, lang: String): CurrentWeatherResponse {&#10;        return api.getCurrentWeather(city, units, lang)&#10;    }&#10;&#10;    override suspend fun getForecast(city: String, units: String, lang: String): WeatherResponse {&#10;        return api.getForecast(city, units, lang)&#10;    }&#10;&#10;    override suspend fun getOneCallForecastMoscow(units: String, lang: String): OneCallResponse {&#10;        // Координаты Москвы: 55.7558, 37.6176&#10;        return api.getOneCallForecast(55.7558, 37.6176, units = units, lang = lang)&#10;    }&#10;&#10;    companion object {&#10;        fun create(): WeatherRepositoryImpl {&#10;            val apiKey = ApiKeys.OPEN_WEATHER&#10;            val interceptor = Interceptor { chain -&gt;&#10;                val original = chain.request()&#10;                val originalUrl = original.url&#10;                val url = originalUrl.newBuilder()&#10;                    .addQueryParameter(&quot;appid&quot;, apiKey)&#10;                    .build()&#10;                val requestBuilder = original.newBuilder().url(url)&#10;                chain.proceed(requestBuilder.build())&#10;            }&#10;            val client = OkHttpClient.Builder()&#10;                .addInterceptor(interceptor)&#10;                .build()&#10;            val retrofit = Retrofit.Builder()&#10;                .baseUrl(&quot;https://api.openweathermap.org/data/2.5/&quot;)&#10;                .addConverterFactory(GsonConverterFactory.create())&#10;                .client(client)&#10;                .build()&#10;            val api = retrofit.create(WeatherApi::class.java)&#10;            return WeatherRepositoryImpl(api)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import com.example.topacademy_android.feature_forecast.domain.WeatherRepository&#10;import okhttp3.Interceptor&#10;import okhttp3.OkHttpClient&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;class WeatherRepositoryImpl(private val api: WeatherApi) : com.example.topacademy_android.feature_forecast.domain.WeatherRepository {&#10;    override suspend fun getCurrentWeather(city: String, units: String, lang: String): CurrentWeatherResponse {&#10;        return api.getCurrentWeather(city, units, lang)&#10;    }&#10;&#10;    override suspend fun getForecast(city: String, units: String, lang: String): WeatherResponse {&#10;        return api.getForecast(city, units, lang)&#10;    }&#10;&#10;    companion object {&#10;        fun create(): WeatherRepositoryImpl {&#10;            val apiKey = ApiKeys.OPEN_WEATHER&#10;            val interceptor = Interceptor { chain -&gt;&#10;                val original = chain.request()&#10;                val originalUrl = original.url&#10;                val url = originalUrl.newBuilder()&#10;                    .addQueryParameter(&quot;appid&quot;, apiKey)&#10;                    .build()&#10;                val requestBuilder = original.newBuilder().url(url)&#10;                chain.proceed(requestBuilder.build())&#10;            }&#10;            val client = OkHttpClient.Builder()&#10;                .addInterceptor(interceptor)&#10;                .build()&#10;            val retrofit = Retrofit.Builder()&#10;                .baseUrl(&quot;https://api.openweathermap.org/data/2.5/&quot;)&#10;                .addConverterFactory(GsonConverterFactory.create())&#10;                .client(client)&#10;                .build()&#10;            val api = retrofit.create(WeatherApi::class.java)&#10;            return WeatherRepositoryImpl(api)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/domain/GetCurrentWeatherUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/domain/GetCurrentWeatherUseCase.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.feature_forecast.domain&#10;&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import kotlin.Result&#10;&#10;class GetCurrentWeatherUseCase(private val repository: WeatherRepository) {&#10;    suspend operator fun invoke(&#10;        city: String,&#10;        apiKey: String,&#10;        units: String = &quot;metric&quot;,&#10;        lang: String = &quot;en&quot;&#10;    ): Result&lt;CurrentWeatherResponse&gt; = try {&#10;        Result.success(repository.getCurrentWeather(city, apiKey, units, lang))&#10;    } catch (e: Exception) {&#10;        Result.failure(e)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.domain&#10;&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import kotlin.Result&#10;&#10;class GetCurrentWeatherUseCase(private val repository: WeatherRepository) {&#10;    suspend operator fun invoke(&#10;        city: String,&#10;        units: String = &quot;metric&quot;,&#10;        lang: String = &quot;en&quot;&#10;    ): Result&lt;CurrentWeatherResponse&gt; = try {&#10;        Result.success(repository.getCurrentWeather(city, units, lang))&#10;    } catch (e: Exception) {&#10;        Result.failure(e)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/domain/WeatherRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/domain/WeatherRepository.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.feature_forecast.domain&#10;&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.OneCallResponse&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;&#10;interface WeatherRepository {&#10;    suspend fun getCurrentWeather(&#10;        city: String,&#10;        units: String = &quot;metric&quot;,&#10;        lang: String = &quot;en&quot;&#10;    ): CurrentWeatherResponse&#10;&#10;    suspend fun getForecast(&#10;        city: String,&#10;        units: String = &quot;metric&quot;,&#10;        lang: String = &quot;en&quot;&#10;    ): WeatherResponse&#10;&#10;    suspend fun getOneCallForecastMoscow(&#10;        units: String = &quot;metric&quot;,&#10;        lang: String = &quot;ru&quot;&#10;    ): OneCallResponse&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.domain&#10;&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;&#10;interface WeatherRepository {&#10;    suspend fun getCurrentWeather(&#10;        city: String,&#10;        units: String = &quot;metric&quot;,&#10;        lang: String = &quot;en&quot;&#10;    ): CurrentWeatherResponse&#10;&#10;    suspend fun getForecast(&#10;        city: String,&#10;        units: String = &quot;metric&quot;,&#10;        lang: String = &quot;en&quot;&#10;    ): WeatherResponse&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/presentation/ForecastItemToHourly.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/presentation/ForecastItemToHourly.kt" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.presentation&#10;&#10;import com.example.topacademy_android.feature_forecast.data.ForecastItem&#10;&#10;// Преобразование ForecastItem в HourlyForecast&#10;fun ForecastItemToHourly(item: ForecastItem): HourlyForecast {&#10;    return HourlyForecast(&#10;        hour = item.dt_txt.substring(11, 16),&#10;        temp = item.main.temp.toInt(),&#10;        iconCode = item.weather.firstOrNull()?.icon&#10;    )&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/presentation/WeatherViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/presentation/WeatherViewModel.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.feature_forecast.presentation&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.LiveData&#10;import com.example.topacademy_android.feature_forecast.domain.WeatherRepository&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.OneCallResponse&#10;import kotlinx.coroutines.launch&#10;&#10;class WeatherViewModel(private val repository: WeatherRepository) : ViewModel() {&#10;    private val _currentWeather = MutableLiveData&lt;CurrentWeatherResponse&gt;()&#10;    val currentWeather: LiveData&lt;CurrentWeatherResponse&gt; = _currentWeather&#10;&#10;    private val _forecast = MutableLiveData&lt;WeatherResponse&gt;()&#10;    val forecast: LiveData&lt;WeatherResponse&gt; = _forecast&#10;&#10;    private val _error = MutableLiveData&lt;String&gt;()&#10;    val error: LiveData&lt;String&gt; = _error&#10;&#10;    private val _oneCallForecast = MutableLiveData&lt;OneCallResponse&gt;()&#10;    val oneCallForecast: LiveData&lt;OneCallResponse&gt; = _oneCallForecast&#10;&#10;    fun fetchCurrentWeather(city: String, units: String = &quot;metric&quot;, lang: String = &quot;en&quot;) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val response = repository.getCurrentWeather(city, units, lang)&#10;                _currentWeather.value = response&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun fetchForecast(city: String, units: String = &quot;metric&quot;, lang: String = &quot;en&quot;) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val response = repository.getForecast(city, units, lang)&#10;                _forecast.value = response&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun fetchMoscowOneCallForecast(units: String = &quot;metric&quot;, lang: String = &quot;ru&quot;) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val response = repository.getOneCallForecastMoscow(units, lang)&#10;                _oneCallForecast.value = response&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.presentation&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.LiveData&#10;import com.example.topacademy_android.feature_forecast.domain.WeatherRepository&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;import kotlinx.coroutines.launch&#10;&#10;class WeatherViewModel(private val repository: WeatherRepository) : ViewModel() {&#10;    private val _currentWeather = MutableLiveData&lt;CurrentWeatherResponse&gt;()&#10;    val currentWeather: LiveData&lt;CurrentWeatherResponse&gt; = _currentWeather&#10;&#10;    private val _forecast = MutableLiveData&lt;WeatherResponse&gt;()&#10;    val forecast: LiveData&lt;WeatherResponse&gt; = _forecast&#10;&#10;    private val _error = MutableLiveData&lt;String&gt;()&#10;    val error: LiveData&lt;String&gt; = _error&#10;&#10;    fun fetchCurrentWeather(city: String, units: String = &quot;metric&quot;, lang: String = &quot;en&quot;) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val response = repository.getCurrentWeather(city, units, lang)&#10;                _currentWeather.value = response&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun fetchForecast(city: String = &quot;Москва&quot;, units: String = &quot;metric&quot;, lang: String = &quot;ru&quot;) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val response = repository.getForecast(city, units, lang)&#10;                _forecast.value = response&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>