<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/MainActivity.kt" />
              <option name="originalContent" value="package com.example.topacademy_android&#10;&#10;import android.os.Bundle&#10;import android.widget.Toast&#10;import androidx.activity.viewModels&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.Observer&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import com.bumptech.glide.Glide&#10;import com.example.topacademy_android.feature_forecast.domain.WeatherRepository&#10;import com.example.topacademy_android.feature_forecast.data.WeatherRepositoryImpl&#10;import com.example.topacademy_android.feature_forecast.presentation.HourlyForecast&#10;import com.example.topacademy_android.feature_forecast.presentation.adapters.HourlyForecastAdapter&#10;import com.example.topacademy_android.feature_forecast.presentation.adapters.WeeklyForecastAdapter&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.ForecastItem&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;import com.example.topacademy_android.databinding.ActivityMainBinding&#10;import com.example.topacademy_android.feature_forecast.presentation.WeatherViewModel&#10;import kotlinx.coroutines.*&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;class MainActivity : AppCompatActivity() {&#10;&#10;    private lateinit var binding: ActivityMainBinding&#10;    private lateinit var hourlyAdapter: HourlyForecastAdapter&#10;    private lateinit var weeklyAdapter: WeeklyForecastAdapter&#10;&#10;    private val weatherViewModel: WeatherViewModel by lazy {&#10;        WeatherViewModel(WeatherRepositoryImpl.create())&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        binding = ActivityMainBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        setSupportActionBar(binding.topAppBar)&#10;&#10;        hourlyAdapter = HourlyForecastAdapter(emptyList())&#10;        weeklyAdapter = WeeklyForecastAdapter(emptyList())&#10;&#10;        binding.rvHourly.layoutManager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)&#10;        binding.rvHourly.adapter = hourlyAdapter&#10;        binding.rvWeekly.layoutManager = LinearLayoutManager(this)&#10;        binding.rvWeekly.adapter = weeklyAdapter&#10;&#10;        // Проверка информативного вывода ошибки на экран&#10;        lifecycleScope.launch {&#10;            val useCase = com.example.topacademy_android.feature_forecast.domain.GetCurrentWeatherUseCase(&#10;                WeatherRepositoryImpl.create()&#10;            )&#10;            val result = useCase(&quot;WrongCity&quot;, &quot;badApiKey&quot;)&#10;            if (result.isFailure) {&#10;                val errorMsg = result.exceptionOrNull()?.message ?: &quot;Unknown error&quot;&#10;                binding.tvCurrentTemp.text = &quot;Ошибка!&quot;&#10;                binding.tvCurrentCondition.text = errorMsg.take(2000)&#10;                Toast.makeText(this@MainActivity, errorMsg.take(2000), Toast.LENGTH_LONG).show()&#10;            } else {&#10;                binding.tvCurrentTemp.text = &quot;Успех!&quot;&#10;                binding.tvCurrentCondition.text = &quot;&quot;&#10;            }&#10;        }&#10;&#10;        val apiKey = &quot;85afd36bff2ab36aac6bdf3a9e0bec09&quot;&#10;        observeWeather()&#10;        weatherViewModel.fetchCurrentWeather(&quot;Moscow&quot;, apiKey)&#10;        weatherViewModel.fetchForecast(&quot;Moscow&quot;, apiKey)&#10;    }&#10;&#10;    private fun observeWeather() {&#10;        weatherViewModel.currentWeather.observe(this, Observer { currentWeather -&gt;&#10;            currentWeather?.let { updateCurrentWeatherUI(it) }&#10;        })&#10;        weatherViewModel.forecast.observe(this, Observer { forecast -&gt;&#10;            forecast?.let {&#10;                updateHourlyForecast(it)&#10;                updateWeeklyForecast(it)&#10;            }&#10;        })&#10;        weatherViewModel.error.observe(this, Observer { errorMsg -&gt;&#10;            errorMsg?.let {&#10;                Toast.makeText(this, &quot;Error: $it&quot;, Toast.LENGTH_LONG).show()&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun updateCurrentWeatherUI(currentWeather: CurrentWeatherResponse) {&#10;        binding.tvCurrentTemp.text = &quot;${currentWeather.main.temp.toInt()}°&quot;&#10;        binding.tvCurrentCondition.text = currentWeather.weather.firstOrNull()?.description ?: &quot;N/A&quot;&#10;        binding.tvLocation.text = currentWeather.name&#10;        val iconCode = currentWeather.weather.firstOrNull()?.icon&#10;        loadWeatherIcon(binding.imgCurrentWeatherIcon, iconCode)&#10;        binding.tvHumidity.text = &quot;Влажность: ${currentWeather.main.humidity}%&quot;&#10;        binding.tvPressure.text = &quot;Давление: ${currentWeather.main.pressure} гПа&quot;&#10;        binding.tvWindSpeed.text = &quot;Ветер: ${currentWeather.wind.speed} м/с&quot;&#10;&#10;&#10;        Toast.makeText(&#10;            this,&#10;            &quot;${currentWeather.name}, ${currentWeather.main.temp}°C, ${currentWeather.weather.firstOrNull()?.description}, &quot; +&#10;                    &quot;${currentWeather.main.humidity}%, ${currentWeather.main.pressure} гПа, ${currentWeather.wind.speed} м/с&quot;,&#10;            Toast.LENGTH_LONG&#10;        ).show()&#10;    }&#10;&#10;    private fun updateHourlyForecast(response: WeatherResponse) {&#10;        val hourlyList: List&lt;HourlyForecast&gt; = response.list.take(5).map {&#10;            ForecastItemToHourly(it)&#10;        }&#10;        hourlyAdapter.updateData(hourlyList)&#10;    }&#10;&#10;    private fun updateWeeklyForecast(response: WeatherResponse) {&#10;        val dailyMap = response.list.groupBy { it.dt_txt.substring(0, 10) }&#10;&#10;        val weeklyList = dailyMap.map { entry -&gt;&#10;            val day = entry.key&#10;            val temps = entry.value.map { it.main.temp }&#10;            val minTemp = temps.minOrNull()?.toInt() ?: 0&#10;            val maxTemp = temps.maxOrNull()?.toInt() ?: 0&#10;            val iconCode = entry.value.first().weather.firstOrNull()?.icon&#10;            val description = entry.value.first().weather.firstOrNull()?.description&#10;&#10;            val precip = entry.value.mapNotNull { it.javaClass.methods.find { m -&gt; m.name == &quot;getRain&quot; }?.invoke(it) }&#10;                .mapNotNull { rainObj -&gt;&#10;                    try {&#10;                        val field = rainObj?.javaClass?.getDeclaredField(&quot;_1h&quot;)&#10;                        field?.isAccessible = true&#10;                        (field?.get(rainObj) as? Number)?.toInt()&#10;                    } catch (e: Exception) { null }&#10;                }.sum()&#10;            val windAvg = entry.value.mapNotNull { it.javaClass.methods.find { m -&gt; m.name == &quot;getWind&quot; }?.invoke(it) }&#10;                .mapNotNull { windObj -&gt;&#10;                    try {&#10;                        val field = windObj?.javaClass?.getDeclaredField(&quot;speed&quot;)&#10;                        field?.isAccessible = true&#10;                        (field?.get(windObj) as? Number)?.toDouble()&#10;                    } catch (e: Exception) { null }&#10;                }.average().takeIf { !it.isNaN() } ?: 0.0&#10;&#10;            WeeklyForecast(day, minTemp, maxTemp, iconCode, description, precip, windAvg)&#10;        }&#10;        weeklyAdapter.updateData(weeklyList)&#10;    }&#10;}&#10;&#10;fun loadWeatherIcon(imageView: android.widget.ImageView, iconCode: String?) {&#10;    if (iconCode == null) return&#10;    val iconUrl = &quot;https://openweathermap.org/img/wn/${iconCode}@2x.png&quot;&#10;    Glide.with(imageView.context).load(iconUrl).into(imageView)&#10;}&#10;&#10;fun ForecastItemToHourly(item: ForecastItem): HourlyForecast {&#10;    return HourlyForecast(&#10;        hour = item.dt_txt.substring(11, 16),&#10;        temp = item.main.temp.toInt(),&#10;        iconCode = item.weather.firstOrNull()?.icon&#10;    )&#10;}&#10;&#10;data class HourlyForecast(&#10;    val hour: String,&#10;    val temp: Int,&#10;    val iconCode: String?&#10;)&#10;&#10;data class WeeklyForecast(&#10;    val day: String,&#10;    val minTemp: Int,&#10;    val maxTemp: Int,&#10;    val iconCode: String?,&#10;    val description: String?,&#10;    val precip: Int?,&#10;    val wind: Double?&#10;)&#10;&#10;data class MainWeatherCard(&#10;    val city: String,&#10;    val temp: Int,&#10;    val description: String,&#10;    val iconCode: String?,&#10;    val humidity: Int,&#10;    val pressure: Int,&#10;    val windSpeed: Double&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android&#10;&#10;import android.os.Bundle&#10;import android.widget.Toast&#10;import androidx.activity.viewModels&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.Observer&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import com.bumptech.glide.Glide&#10;import com.example.topacademy_android.feature_forecast.domain.WeatherRepository&#10;import com.example.topacademy_android.feature_forecast.data.WeatherRepositoryImpl&#10;import com.example.topacademy_android.feature_forecast.presentation.HourlyForecast&#10;import com.example.topacademy_android.feature_forecast.presentation.adapters.HourlyForecastAdapter&#10;import com.example.topacademy_android.feature_forecast.presentation.adapters.WeeklyForecastAdapter&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.ForecastItem&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;import com.example.topacademy_android.databinding.ActivityMainBinding&#10;import com.example.topacademy_android.feature_forecast.presentation.WeatherViewModel&#10;import kotlinx.coroutines.*&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;class MainActivity : AppCompatActivity() {&#10;&#10;    private lateinit var binding: ActivityMainBinding&#10;    private lateinit var hourlyAdapter: HourlyForecastAdapter&#10;    private lateinit var weeklyAdapter: WeeklyForecastAdapter&#10;&#10;    private val weatherViewModel: WeatherViewModel by lazy {&#10;        WeatherViewModel(WeatherRepositoryImpl.create())&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        binding = ActivityMainBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        setSupportActionBar(binding.topAppBar)&#10;&#10;        hourlyAdapter = HourlyForecastAdapter(emptyList())&#10;        weeklyAdapter = WeeklyForecastAdapter(emptyList())&#10;&#10;        binding.rvHourly.layoutManager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)&#10;        binding.rvHourly.adapter = hourlyAdapter&#10;        binding.rvWeekly.layoutManager = LinearLayoutManager(this)&#10;        binding.rvWeekly.adapter = weeklyAdapter&#10;&#10;        val apiKey = &quot;85afd36bff2ab36aac6bdf3a9e0bec09&quot;&#10;        observeWeather()&#10;        weatherViewModel.fetchCurrentWeather(&quot;Moscow&quot;, apiKey)&#10;        weatherViewModel.fetchForecast(&quot;Moscow&quot;, apiKey)&#10;    }&#10;&#10;    private fun observeWeather() {&#10;        weatherViewModel.currentWeather.observe(this, Observer { currentWeather -&gt;&#10;            currentWeather?.let { updateCurrentWeatherUI(it) }&#10;        })&#10;        weatherViewModel.forecast.observe(this, Observer { forecast -&gt;&#10;            forecast?.let {&#10;                updateHourlyForecast(it)&#10;                updateWeeklyForecast(it)&#10;            }&#10;        })&#10;        weatherViewModel.error.observe(this, Observer { errorMsg -&gt;&#10;            errorMsg?.let {&#10;                Toast.makeText(this, &quot;Error: $it&quot;, Toast.LENGTH_LONG).show()&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun updateCurrentWeatherUI(currentWeather: CurrentWeatherResponse) {&#10;        binding.tvCurrentTemp.text = &quot;${currentWeather.main.temp.toInt()}°&quot;&#10;        binding.tvCurrentCondition.text = currentWeather.weather.firstOrNull()?.description ?: &quot;N/A&quot;&#10;        binding.tvLocation.text = currentWeather.name&#10;        val iconCode = currentWeather.weather.firstOrNull()?.icon&#10;        loadWeatherIcon(binding.imgCurrentWeatherIcon, iconCode)&#10;        binding.tvHumidity.text = &quot;Влажность: ${currentWeather.main.humidity}%&quot;&#10;        binding.tvPressure.text = &quot;Давление: ${currentWeather.main.pressure} гПа&quot;&#10;        binding.tvWindSpeed.text = &quot;Ветер: ${currentWeather.wind.speed} м/с&quot;&#10;&#10;&#10;        Toast.makeText(&#10;            this,&#10;            &quot;${currentWeather.name}, ${currentWeather.main.temp}°C, ${currentWeather.weather.firstOrNull()?.description}, &quot; +&#10;                    &quot;${currentWeather.main.humidity}%, ${currentWeather.main.pressure} гПа, ${currentWeather.wind.speed} м/с&quot;,&#10;            Toast.LENGTH_LONG&#10;        ).show()&#10;    }&#10;&#10;    private fun updateHourlyForecast(response: WeatherResponse) {&#10;        val hourlyList: List&lt;HourlyForecast&gt; = response.list.take(5).map {&#10;            ForecastItemToHourly(it)&#10;        }&#10;        hourlyAdapter.updateData(hourlyList)&#10;    }&#10;&#10;    private fun updateWeeklyForecast(response: WeatherResponse) {&#10;        val dailyMap = response.list.groupBy { it.dt_txt.substring(0, 10) }&#10;&#10;        val weeklyList = dailyMap.map { entry -&gt;&#10;            val day = entry.key&#10;            val temps = entry.value.map { it.main.temp }&#10;            val minTemp = temps.minOrNull()?.toInt() ?: 0&#10;            val maxTemp = temps.maxOrNull()?.toInt() ?: 0&#10;            val iconCode = entry.value.first().weather.firstOrNull()?.icon&#10;            val description = entry.value.first().weather.firstOrNull()?.description&#10;&#10;            val precip = entry.value.mapNotNull { it.javaClass.methods.find { m -&gt; m.name == &quot;getRain&quot; }?.invoke(it) }&#10;                .mapNotNull { rainObj -&gt;&#10;                    try {&#10;                        val field = rainObj?.javaClass?.getDeclaredField(&quot;_1h&quot;)&#10;                        field?.isAccessible = true&#10;                        (field?.get(rainObj) as? Number)?.toInt()&#10;                    } catch (e: Exception) { null }&#10;                }.sum()&#10;            val windAvg = entry.value.mapNotNull { it.javaClass.methods.find { m -&gt; m.name == &quot;getWind&quot; }?.invoke(it) }&#10;                .mapNotNull { windObj -&gt;&#10;                    try {&#10;                        val field = windObj?.javaClass?.getDeclaredField(&quot;speed&quot;)&#10;                        field?.isAccessible = true&#10;                        (field?.get(windObj) as? Number)?.toDouble()&#10;                    } catch (e: Exception) { null }&#10;                }.average().takeIf { !it.isNaN() } ?: 0.0&#10;&#10;            WeeklyForecast(day, minTemp, maxTemp, iconCode, description, precip, windAvg)&#10;        }&#10;        weeklyAdapter.updateData(weeklyList)&#10;    }&#10;}&#10;&#10;fun loadWeatherIcon(imageView: android.widget.ImageView, iconCode: String?) {&#10;    if (iconCode == null) return&#10;    val iconUrl = &quot;https://openweathermap.org/img/wn/${iconCode}@2x.png&quot;&#10;    Glide.with(imageView.context).load(iconUrl).into(imageView)&#10;}&#10;&#10;fun ForecastItemToHourly(item: ForecastItem): HourlyForecast {&#10;    return HourlyForecast(&#10;        hour = item.dt_txt.substring(11, 16),&#10;        temp = item.main.temp.toInt(),&#10;        iconCode = item.weather.firstOrNull()?.icon&#10;    )&#10;}&#10;&#10;data class HourlyForecast(&#10;    val hour: String,&#10;    val temp: Int,&#10;    val iconCode: String?&#10;)&#10;&#10;data class WeeklyForecast(&#10;    val day: String,&#10;    val minTemp: Int,&#10;    val maxTemp: Int,&#10;    val iconCode: String?,&#10;    val description: String?,&#10;    val precip: Int?,&#10;    val wind: Double?&#10;)&#10;&#10;data class MainWeatherCard(&#10;    val city: String,&#10;    val temp: Int,&#10;    val description: String,&#10;    val iconCode: String?,&#10;    val humidity: Int,&#10;    val pressure: Int,&#10;    val windSpeed: Double&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/adapter/ForecastAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/adapter/ForecastAdapter.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.feature_forecast.presentation&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import coil.load&#10;import com.example.topacademy_android.R&#10;import com.example.topacademy_android.data.ForecastItem&#10;&#10;class ForecastAdapter(&#10;    private var items: List&lt;ForecastItem&gt;,&#10;    private val onItemClick: (ForecastItem) -&gt; Unit&#10;) : RecyclerView.Adapter&lt;ForecastAdapter.ForecastViewHolder&gt;() {&#10;&#10;    inner class ForecastViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val ivIcon: ImageView = itemView.findViewById(R.id.ivIcon)&#10;        private val tvDate: TextView = itemView.findViewById(R.id.tvDate)&#10;        private val tvTemp: TextView = itemView.findViewById(R.id.tvTemp)&#10;        private val tvDescription: TextView = itemView.findViewById(R.id.tvDescription)&#10;&#10;        fun bind(item: ForecastItem) {&#10;            tvDate.text = item.dt_txt&#10;            tvTemp.text = &quot;${item.main.temp.toInt()} °C&quot;&#10;            tvDescription.text = item.weather.firstOrNull()?.description?.replaceFirstChar { it.uppercase() } ?: &quot;&quot;&#10;&#10;            val iconCode = item.weather.firstOrNull()?.icon&#10;            val iconUrl = &quot;https://openweathermap.org/img/wn/${iconCode}@2x.png&quot;&#10;            ivIcon.load(iconUrl)&#10;&#10;            itemView.setOnClickListener {&#10;                onItemClick(item)&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ForecastViewHolder {&#10;        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_forecast, parent, false)&#10;        return ForecastViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ForecastViewHolder, position: Int) {&#10;        holder.bind(items[position])&#10;    }&#10;&#10;    override fun getItemCount(): Int = items.size&#10;&#10;    fun updateData(newItems: List&lt;ForecastItem&gt;) {&#10;        items = newItems&#10;        notifyDataSetChanged()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.presentation&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import coil.load&#10;import com.example.topacademy_android.R&#10;import com.example.topacademy_android.feature_forecast.data.ForecastItem&#10;&#10;class ForecastAdapter(&#10;    private var items: List&lt;ForecastItem&gt;,&#10;    private val onItemClick: (ForecastItem) -&gt; Unit&#10;) : RecyclerView.Adapter&lt;ForecastAdapter.ForecastViewHolder&gt;() {&#10;&#10;    inner class ForecastViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val ivIcon: ImageView = itemView.findViewById(R.id.ivIcon)&#10;        private val tvDate: TextView = itemView.findViewById(R.id.tvDate)&#10;        private val tvTemp: TextView = itemView.findViewById(R.id.tvTemp)&#10;        private val tvDescription: TextView = itemView.findViewById(R.id.tvDescription)&#10;&#10;        fun bind(item: ForecastItem) {&#10;            tvDate.text = item.dt_txt&#10;            tvTemp.text = &quot;${item.main.temp.toInt()} °C&quot;&#10;            tvDescription.text = item.weather.firstOrNull()?.description?.replaceFirstChar { it.uppercase() } ?: &quot;&quot;&#10;&#10;            val iconCode = item.weather.firstOrNull()?.icon&#10;            val iconUrl = &quot;https://openweathermap.org/img/wn/${iconCode}@2x.png&quot;&#10;            ivIcon.load(iconUrl)&#10;&#10;            itemView.setOnClickListener {&#10;                onItemClick(item)&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ForecastViewHolder {&#10;        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_forecast, parent, false)&#10;        return ForecastViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ForecastViewHolder, position: Int) {&#10;        holder.bind(items[position])&#10;    }&#10;&#10;    override fun getItemCount(): Int = items.size&#10;&#10;    fun updateData(newItems: List&lt;ForecastItem&gt;) {&#10;        items = newItems&#10;        notifyDataSetChanged()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/adapter/HourlyForecastAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/adapter/HourlyForecastAdapter.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.feature_forecast.presentation&#10;&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.bumptech.glide.Glide&#10;import com.example.topacademy_android.databinding.ItemHourlyForecastBinding&#10;import com.example.topacademy_android.HourlyForecast&#10;&#10;class HourlyForecastAdapter(private var data: List&lt;HourlyForecast&gt;) :&#10;    RecyclerView.Adapter&lt;HourlyForecastAdapter.HourlyViewHolder&gt;() {&#10;&#10;    inner class HourlyViewHolder(val binding: ItemHourlyForecastBinding) :&#10;        RecyclerView.ViewHolder(binding.root)&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): HourlyViewHolder {&#10;        val binding = ItemHourlyForecastBinding.inflate(&#10;            LayoutInflater.from(parent.context), parent, false)&#10;        return HourlyViewHolder(binding)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: HourlyViewHolder, position: Int) {&#10;        val item = data[position]&#10;        holder.binding.tvHour.text = item.hour&#10;        holder.binding.tvTemp.text = &quot;${item.temp}°&quot;&#10;&#10;&#10;        val iconCode = item.iconCode&#10;        if (iconCode != null) {&#10;            val iconUrl = &quot;https://openweathermap.org/img/wn/${iconCode}@2x.png&quot;&#10;            Glide.with(holder.binding.imgIcon.context)&#10;                .load(iconUrl)&#10;                .into(holder.binding.imgIcon)&#10;        } else {&#10;&#10;            holder.binding.imgIcon.setImageResource(0)&#10;        }&#10;    }&#10;&#10;    override fun getItemCount() = data.size&#10;&#10;    fun updateData(newData: List&lt;HourlyForecast&gt;) {&#10;        data = newData&#10;        notifyDataSetChanged()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.presentation&#10;&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.bumptech.glide.Glide&#10;import com.example.topacademy_android.databinding.ItemHourlyForecastBinding&#10;import com.example.topacademy_android.feature_forecast.presentation.HourlyForecast&#10;&#10;class HourlyForecastAdapter(private var data: List&lt;HourlyForecast&gt;) :&#10;    RecyclerView.Adapter&lt;HourlyForecastAdapter.HourlyViewHolder&gt;() {&#10;&#10;    inner class HourlyViewHolder(val binding: ItemHourlyForecastBinding) :&#10;        RecyclerView.ViewHolder(binding.root)&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): HourlyViewHolder {&#10;        val binding = ItemHourlyForecastBinding.inflate(&#10;            LayoutInflater.from(parent.context), parent, false)&#10;        return HourlyViewHolder(binding)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: HourlyViewHolder, position: Int) {&#10;        val item = data[position]&#10;        holder.binding.tvHour.text = item.hour&#10;        holder.binding.tvTemp.text = &quot;${item.temp}°&quot;&#10;&#10;&#10;        val iconCode = item.iconCode&#10;        if (iconCode != null) {&#10;            val iconUrl = &quot;https://openweathermap.org/img/wn/${iconCode}@2x.png&quot;&#10;            Glide.with(holder.binding.imgIcon.context)&#10;                .load(iconUrl)&#10;                .into(holder.binding.imgIcon)&#10;        } else {&#10;&#10;            holder.binding.imgIcon.setImageResource(0)&#10;        }&#10;    }&#10;&#10;    override fun getItemCount() = data.size&#10;&#10;    fun updateData(newData: List&lt;HourlyForecast&gt;) {&#10;        data = newData&#10;        notifyDataSetChanged()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/adapter/WeeklyForecastAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/adapter/WeeklyForecastAdapter.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.bumptech.glide.Glide&#10;import com.example.topacademy_android.databinding.ItemWeeklyForecastBinding&#10;import com.example.topacademy_android.WeeklyForecast&#10;&#10;class WeeklyForecastAdapter(private var data: List&lt;WeeklyForecast&gt;) :&#10;    RecyclerView.Adapter&lt;WeeklyForecastAdapter.WeeklyViewHolder&gt;() {&#10;&#10;    inner class WeeklyViewHolder(val binding: ItemWeeklyForecastBinding) :&#10;        RecyclerView.ViewHolder(binding.root)&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): WeeklyViewHolder {&#10;        val binding = ItemWeeklyForecastBinding.inflate(&#10;            LayoutInflater.from(parent.context), parent, false)&#10;        return WeeklyViewHolder(binding)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: WeeklyViewHolder, position: Int) {&#10;        val item = data[position]&#10;        holder.binding.tvDay.text = item.day&#10;        holder.binding.tvTempRange.text = &quot;${item.minTemp}° - ${item.maxTemp}°&quot;&#10;            val iconUrl = &quot;https://openweathermap.org/img/wn/${iconCode}@2x.png&quot;&#10;            Glide.with(holder.binding.imgIcon.context)&#10;                .load(iconUrl)&#10;                .into(holder.binding.imgIcon)&#10;        } else {&#10;            holder.binding.imgIcon.setImageResource(0) // или плейсхолдер&#10;        }&#10;    }&#10;&#10;    override fun getItemCount() = data.size&#10;&#10;    fun updateData(newData: List&lt;WeeklyForecast&gt;) {&#10;        data = newData&#10;        notifyDataSetChanged()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.presentation&#10;&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.bumptech.glide.Glide&#10;import com.example.topacademy_android.databinding.ItemWeeklyForecastBinding&#10;import com.example.topacademy_android.WeeklyForecast&#10;&#10;class WeeklyForecastAdapter(private var data: List&lt;WeeklyForecast&gt;) :&#10;    RecyclerView.Adapter&lt;WeeklyForecastAdapter.WeeklyViewHolder&gt;() {&#10;&#10;    inner class WeeklyViewHolder(val binding: ItemWeeklyForecastBinding) :&#10;        RecyclerView.ViewHolder(binding.root)&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): WeeklyViewHolder {&#10;        val binding = ItemWeeklyForecastBinding.inflate(&#10;            LayoutInflater.from(parent.context), parent, false)&#10;        return WeeklyViewHolder(binding)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: WeeklyViewHolder, position: Int) {&#10;        val item = data[position]&#10;        holder.binding.tvDay.text = item.day&#10;        holder.binding.tvTempRange.text = &quot;${item.minTemp}° / ${item.maxTemp}°&quot;&#10;        holder.binding.tvDescription.text = item.description?.replaceFirstChar { it.uppercase() } ?: &quot;&quot;&#10;        holder.binding.tvPrecip.text = if (item.precip != null) &quot;Осадки: ${item.precip}%&quot; else &quot;&quot;&#10;        holder.binding.tvWind.text = if (item.wind != null) &quot;Ветер: ${&quot;%.1f&quot;.format(item.wind)} м/с&quot; else &quot;&quot;&#10;&#10;        val iconCode = item.iconCode&#10;        if (iconCode != null) {&#10;            val iconUrl = &quot;https://openweathermap.org/img/wn/${iconCode}@2x.png&quot;&#10;            Glide.with(holder.binding.imgIcon.context)&#10;                .load(iconUrl)&#10;                .into(holder.binding.imgIcon)&#10;        } else {&#10;            holder.binding.imgIcon.setImageResource(0) // или плейсхолдер&#10;        }&#10;    }&#10;&#10;    override fun getItemCount() = data.size&#10;&#10;    fun updateData(newData: List&lt;WeeklyForecast&gt;) {&#10;        data = newData&#10;        notifyDataSetChanged()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/data/WeatherResponse.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/data/WeatherResponse.kt" />
              <option name="updatedContent" value="// Файл удалён. Все модели теперь только в feature_forecast.data" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/ApiService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/ApiService.kt" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;import retrofit2.Response&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;interface ApiService {&#10;    @GET(&quot;data/2.5/forecast&quot;)&#10;    suspend fun getForecastAsync(&#10;        @Query(&quot;q&quot;) city: String,&#10;        @Query(&quot;appid&quot;) apiKey: String,&#10;        @Query(&quot;units&quot;) units: String = &quot;metric&quot;&#10;    ): Response&lt;WeatherResponse&gt;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/RetrofitInstance.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/RetrofitInstance.kt" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;&#10;object RetrofitInstance {&#10;    private val retrofit by lazy {&#10;        Retrofit.Builder()&#10;            .baseUrl(&quot;https://api.openweathermap.org/&quot;)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;    }&#10;&#10;    val api: ApiService by lazy {&#10;        retrofit.create(ApiService::class.java)&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/WeatherApi.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/WeatherApi.kt" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;interface WeatherApi {&#10;    @GET(&quot;forecast&quot;)&#10;    suspend fun getForecast(&#10;        @Query(&quot;q&quot;) city: String,&#10;        @Query(&quot;appid&quot;) apiKey: String,&#10;        @Query(&quot;units&quot;) units: String = &quot;metric&quot;,&#10;        @Query(&quot;lang&quot;) lang: String = &quot;en&quot;&#10;    ): WeatherResponse&#10;&#10;    @GET(&quot;weather&quot;)&#10;    suspend fun getCurrentWeather(&#10;        @Query(&quot;q&quot;) city: String,&#10;        @Query(&quot;appid&quot;) apiKey: String,&#10;        @Query(&quot;units&quot;) units: String = &quot;metric&quot;,&#10;        @Query(&quot;lang&quot;) lang: String = &quot;en&quot;&#10;    ): CurrentWeatherResponse&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/WeatherRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/WeatherRepository.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import com.example.topacademy_android.feature_forecast.domain.WeatherRepository&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;class WeatherRepositoryImpl(private val api: WeatherApi) : WeatherRepository {&#10;    override suspend fun getCurrentWeather(city: String, apiKey: String, units: String, lang: String): CurrentWeatherResponse {&#10;        return api.getCurrentWeather(city, apiKey, units, lang)&#10;    }&#10;&#10;    override suspend fun getForecast(city: String, apiKey: String, units: String, lang: String): WeatherResponse {&#10;        return api.getForecast(city, apiKey, units, lang)&#10;    }&#10;&#10;    companion object {&#10;        fun create(): WeatherRepositoryImpl {&#10;            val retrofit = Retrofit.Builder()&#10;                .baseUrl(&quot;https://api.openweathermap.org/data/2.5/&quot;)&#10;                .addConverterFactory(GsonConverterFactory.create())&#10;                .build()&#10;            val api = retrofit.create(WeatherApi::class.java)&#10;            return WeatherRepositoryImpl(api)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import com.example.topacademy_android.feature_forecast.domain.WeatherRepository&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;class WeatherRepositoryImpl(private val api: WeatherApi) : com.example.topacademy_android.feature_forecast.domain.WeatherRepository {&#10;    override suspend fun getCurrentWeather(city: String, apiKey: String, units: String, lang: String): CurrentWeatherResponse {&#10;        return api.getCurrentWeather(city, apiKey, units, lang)&#10;    }&#10;&#10;    override suspend fun getForecast(city: String, apiKey: String, units: String, lang: String): WeatherResponse {&#10;        return api.getForecast(city, apiKey, units, lang)&#10;    }&#10;&#10;    companion object {&#10;        fun create(): WeatherRepositoryImpl {&#10;            val retrofit = Retrofit.Builder()&#10;                .baseUrl(&quot;https://api.openweathermap.org/data/2.5/&quot;)&#10;                .addConverterFactory(GsonConverterFactory.create())&#10;                .build()&#10;            val api = retrofit.create(WeatherApi::class.java)&#10;            return WeatherRepositoryImpl(api)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/WeatherResponse.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/WeatherResponse.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import android.os.Parcelable&#10;import kotlinx.parcelize.Parcelize&#10;import kotlinx.parcelize.RawValue&#10;&#10;@Parcelize&#10;data class WeatherResponse(&#10;    val list: List&lt;ForecastItem&gt;,&#10;    val city: City&#10;) : Parcelable&#10;&#10;@Parcelize&#10;data class City(&#10;    val id: Int,&#10;    val name: String,&#10;    val country: String,&#10;    val coord: Coord&#10;) : Parcelable&#10;&#10;@Parcelize&#10;data class Coord(&#10;    val lat: Double,&#10;    val lon: Double&#10;) : Parcelable&#10;&#10;@Parcelize&#10;data class ForecastItem(&#10;    val dt_txt: String,&#10;    val main: Main,&#10;    val weather: List&lt;@RawValue Weather&gt;&#10;) : Parcelable&#10;&#10;@Parcelize&#10;data class Main(&#10;    val temp: Double&#10;) : Parcelable&#10;&#10;@Parcelize&#10;data class Weather(&#10;    val description: String,&#10;    val icon: String&#10;) : Parcelable&#10;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import android.os.Parcelable&#10;import kotlinx.parcelize.Parcelize&#10;import kotlinx.parcelize.RawValue&#10;&#10;@Parcelize&#10;data class WeatherResponse(&#10;    val list: List&lt;ForecastItem&gt;,&#10;    val city: City&#10;) : Parcelable&#10;&#10;@Parcelize&#10;data class City(&#10;    val id: Int,&#10;    val name: String,&#10;    val country: String,&#10;    val coord: Coord&#10;) : Parcelable&#10;&#10;@Parcelize&#10;data class Coord(&#10;    val lat: Double,&#10;    val lon: Double&#10;) : Parcelable&#10;&#10;@Parcelize&#10;data class ForecastItem(&#10;    val dt_txt: String,&#10;    val main: ForecastMain,&#10;    val weather: List&lt;@RawValue ForecastWeather&gt;&#10;) : Parcelable&#10;&#10;@Parcelize&#10;data class ForecastMain(&#10;    val temp: Double&#10;) : Parcelable&#10;&#10;@Parcelize&#10;data class ForecastWeather(&#10;    val description: String,&#10;    val icon: String&#10;) : Parcelable" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/domain/GetCurrentWeatherUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/domain/GetCurrentWeatherUseCase.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.feature_forecast.domain&#10;&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import kotlin.Result&#10;&#10;class GetCurrentWeatherUseCase(private val repository: WeatherRepository) {&#10;    suspend operator fun invoke(&#10;        city: String,&#10;        apiKey: String,&#10;        units: String = &quot;metric&quot;,&#10;        lang: String = &quot;en&quot;&#10;    ): Result&lt;CurrentWeatherResponse&gt; = try {&#10;        Result.success(repository.getCurrentWeather(city, apiKey, units, lang))&#10;    } catch (e: Exception) {&#10;        val errorMessage = buildString {&#10;            appendLine(&quot;Ошибка получения текущей погоды:&quot;)&#10;            appendLine(&quot;Тип: ${e::class.qualifiedName}&quot;)&#10;            appendLine(&quot;Сообщение: ${e.message}&quot;)&#10;            appendLine(&quot;Стек вызовов: &quot;)&#10;            appendLine(e.stackTraceToString())&#10;        }&#10;        Result.failure(Exception(errorMessage, e))&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.domain&#10;&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import kotlin.Result&#10;&#10;class GetCurrentWeatherUseCase(private val repository: WeatherRepository) {&#10;    suspend operator fun invoke(&#10;        city: String,&#10;        apiKey: String,&#10;        units: String = &quot;metric&quot;,&#10;        lang: String = &quot;en&quot;&#10;    ): Result&lt;CurrentWeatherResponse&gt; = try {&#10;        Result.success(repository.getCurrentWeather(city, apiKey, units, lang))&#10;    } catch (e: Exception) {&#10;        Result.failure(e)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/presentation/WeatherViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/presentation/WeatherViewModel.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.feature_forecast.presentation&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.LiveData&#10;import com.example.topacademy_android.feature_forecast.data.WeatherRepository&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;import kotlinx.coroutines.launch&#10;&#10;class WeatherViewModel(private val repository: WeatherRepository) : ViewModel() {&#10;    private val _currentWeather = MutableLiveData&lt;CurrentWeatherResponse&gt;()&#10;    val currentWeather: LiveData&lt;CurrentWeatherResponse&gt; = _currentWeather&#10;&#10;    private val _forecast = MutableLiveData&lt;WeatherResponse&gt;()&#10;    val forecast: LiveData&lt;WeatherResponse&gt; = _forecast&#10;&#10;    private val _error = MutableLiveData&lt;String&gt;()&#10;    val error: LiveData&lt;String&gt; = _error&#10;&#10;    fun fetchCurrentWeather(city: String, apiKey: String, units: String = &quot;metric&quot;, lang: String = &quot;en&quot;) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val response = repository.getCurrentWeather(city, apiKey, units, lang)&#10;                _currentWeather.value = response&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun fetchForecast(city: String, apiKey: String, units: String = &quot;metric&quot;, lang: String = &quot;en&quot;) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val response = repository.getForecast(city, apiKey, units, lang)&#10;                _forecast.value = response&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.presentation&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.LiveData&#10;import com.example.topacademy_android.feature_forecast.domain.WeatherRepository&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;import kotlinx.coroutines.launch&#10;&#10;class WeatherViewModel(private val repository: WeatherRepository) : ViewModel() {&#10;    private val _currentWeather = MutableLiveData&lt;CurrentWeatherResponse&gt;()&#10;    val currentWeather: LiveData&lt;CurrentWeatherResponse&gt; = _currentWeather&#10;&#10;    private val _forecast = MutableLiveData&lt;WeatherResponse&gt;()&#10;    val forecast: LiveData&lt;WeatherResponse&gt; = _forecast&#10;&#10;    private val _error = MutableLiveData&lt;String&gt;()&#10;    val error: LiveData&lt;String&gt; = _error&#10;&#10;    fun fetchCurrentWeather(city: String, apiKey: String, units: String = &quot;metric&quot;, lang: String = &quot;en&quot;) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val response = repository.getCurrentWeather(city, apiKey, units, lang)&#10;                _currentWeather.value = response&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun fetchForecast(city: String, apiKey: String, units: String = &quot;metric&quot;, lang: String = &quot;en&quot;) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val response = repository.getForecast(city, apiKey, units, lang)&#10;                _forecast.value = response&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/presentation/adapters/HourlyForecastAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/presentation/adapters/HourlyForecastAdapter.kt" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.presentation.adapters&#10;&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.bumptech.glide.Glide&#10;import com.example.topacademy_android.databinding.ItemHourlyForecastBinding&#10;import com.example.topacademy_android.feature_forecast.presentation.HourlyForecast&#10;&#10;class HourlyForecastAdapter(private var data: List&lt;HourlyForecast&gt;) :&#10;    RecyclerView.Adapter&lt;HourlyForecastAdapter.HourlyViewHolder&gt;() {&#10;&#10;    inner class HourlyViewHolder(val binding: ItemHourlyForecastBinding) :&#10;        RecyclerView.ViewHolder(binding.root)&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): HourlyViewHolder {&#10;        val binding = ItemHourlyForecastBinding.inflate(&#10;            LayoutInflater.from(parent.context), parent, false)&#10;        return HourlyViewHolder(binding)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: HourlyViewHolder, position: Int) {&#10;        val item = data[position]&#10;        holder.binding.tvHour.text = item.hour&#10;        holder.binding.tvTemp.text = &quot;${item.temp}°&quot;&#10;&#10;        val iconCode = item.iconCode&#10;        if (iconCode != null) {&#10;            val iconUrl = &quot;https://openweathermap.org/img/wn/${iconCode}@2x.png&quot;&#10;            Glide.with(holder.binding.imgIcon.context)&#10;                .load(iconUrl)&#10;                .into(holder.binding.imgIcon)&#10;        } else {&#10;            holder.binding.imgIcon.setImageResource(0)&#10;        }&#10;    }&#10;&#10;    override fun getItemCount() = data.size&#10;&#10;    fun updateData(newData: List&lt;HourlyForecast&gt;) {&#10;        data = newData&#10;        notifyDataSetChanged()&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/presentation/adapters/WeeklyForecastAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/presentation/adapters/WeeklyForecastAdapter.kt" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.presentation.adapters&#10;&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.bumptech.glide.Glide&#10;import com.example.topacademy_android.databinding.ItemWeeklyForecastBinding&#10;import com.example.topacademy_android.WeeklyForecast&#10;&#10;class WeeklyForecastAdapter(private var data: List&lt;WeeklyForecast&gt;) :&#10;    RecyclerView.Adapter&lt;WeeklyForecastAdapter.WeeklyViewHolder&gt;() {&#10;&#10;    inner class WeeklyViewHolder(val binding: ItemWeeklyForecastBinding) :&#10;        RecyclerView.ViewHolder(binding.root)&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): WeeklyViewHolder {&#10;        val binding = ItemWeeklyForecastBinding.inflate(&#10;            LayoutInflater.from(parent.context), parent, false)&#10;        return WeeklyViewHolder(binding)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: WeeklyViewHolder, position: Int) {&#10;        val item = data[position]&#10;        holder.binding.tvDay.text = item.day&#10;        holder.binding.tvTempRange.text = &quot;${item.minTemp}° / ${item.maxTemp}°&quot;&#10;        holder.binding.tvDescription.text = item.description?.replaceFirstChar { it.uppercase() } ?: &quot;&quot;&#10;        holder.binding.tvPrecip.text = if (item.precip != null) &quot;Осадки: ${item.precip}%&quot; else &quot;&quot;&#10;        holder.binding.tvWind.text = if (item.wind != null) &quot;Ветер: ${&quot;%.1f&quot;.format(item.wind)} м/с&quot; else &quot;&quot;&#10;&#10;        val iconCode = item.iconCode&#10;        if (iconCode != null) {&#10;            val iconUrl = &quot;https://openweathermap.org/img/wn/${iconCode}@2x.png&quot;&#10;            Glide.with(holder.binding.imgIcon.context)&#10;                .load(iconUrl)&#10;                .into(holder.binding.imgIcon)&#10;        } else {&#10;            holder.binding.imgIcon.setImageResource(0)&#10;        }&#10;    }&#10;&#10;    override fun getItemCount() = data.size&#10;&#10;    fun updateData(newData: List&lt;WeeklyForecast&gt;) {&#10;        data = newData&#10;        notifyDataSetChanged()&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/models/CurrentWeather.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/models/CurrentWeather.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.models&#10;&#10;data class CurrentWeather(&#10;    val temperature: Int,&#10;    val condition: String,&#10;    val iconResId: Int&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;data class CurrentWeather(&#10;    val temperature: Int,&#10;    val condition: String,&#10;    val iconResId: Int&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/network/ApiService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/network/ApiService.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import com.example.topacademy_android.data.WeatherResponse&#10;import retrofit2.Response&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;interface ApiService {&#10;    @GET(&quot;data/2.5/forecast&quot;)&#10;    suspend fun getForecastAsync(&#10;        @Query(&quot;q&quot;) city: String,&#10;        @Query(&quot;appid&quot;) apiKey: String,&#10;        @Query(&quot;units&quot;) units: String = &quot;metric&quot;&#10;    ): Response&lt;WeatherResponse&gt;&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;import retrofit2.Response&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;interface ApiService {&#10;    @GET(&quot;data/2.5/forecast&quot;)&#10;    suspend fun getForecastAsync(&#10;        @Query(&quot;q&quot;) city: String,&#10;        @Query(&quot;appid&quot;) apiKey: String,&#10;        @Query(&quot;units&quot;) units: String = &quot;metric&quot;&#10;    ): Response&lt;WeatherResponse&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/network/RetrofitInstance.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/network/RetrofitInstance.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.network&#10;&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;&#10;object RetrofitInstance {&#10;    private val retrofit by lazy {&#10;        Retrofit.Builder()&#10;            .baseUrl(&quot;https://api.openweathermap.org/&quot;)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;    }&#10;&#10;    val api: ApiService by lazy {&#10;        retrofit.create(ApiService::class.java)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;&#10;object RetrofitInstance {&#10;    private val retrofit by lazy {&#10;        Retrofit.Builder()&#10;            .baseUrl(&quot;https://api.openweathermap.org/&quot;)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;    }&#10;&#10;    val api: ApiService by lazy {&#10;        retrofit.create(ApiService::class.java)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/network/WeatherApi.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/network/WeatherApi.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;interface WeatherApi {&#10;    @GET(&quot;data/2.5/forecast&quot;)&#10;    suspend fun getForecast(&#10;        @Query(&quot;q&quot;) city: String,&#10;        @Query(&quot;appid&quot;) apiKey: String,&#10;        @Query(&quot;units&quot;) units: String = &quot;metric&quot;,&#10;        @Query(&quot;lang&quot;) lang: String = &quot;en&quot;&#10;    ): WeatherResponse&#10;&#10;    @GET(&quot;data/2.5/weather&quot;)&#10;    suspend fun getCurrentWeather(&#10;        @Query(&quot;q&quot;) city: String,&#10;        @Query(&quot;appid&quot;) apiKey: String,&#10;        @Query(&quot;units&quot;) units: String = &quot;metric&quot;,&#10;        @Query(&quot;lang&quot;) lang: String = &quot;en&quot;&#10;    ): CurrentWeatherResponse&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;interface WeatherApi {&#10;    @GET(&quot;forecast&quot;)&#10;    suspend fun getForecast(&#10;        @Query(&quot;q&quot;) city: String,&#10;        @Query(&quot;appid&quot;) apiKey: String,&#10;        @Query(&quot;units&quot;) units: String = &quot;metric&quot;,&#10;        @Query(&quot;lang&quot;) lang: String = &quot;en&quot;&#10;    ): WeatherResponse&#10;&#10;    @GET(&quot;weather&quot;)&#10;    suspend fun getCurrentWeather(&#10;        @Query(&quot;q&quot;) city: String,&#10;        @Query(&quot;appid&quot;) apiKey: String,&#10;        @Query(&quot;units&quot;) units: String = &quot;metric&quot;,&#10;        @Query(&quot;lang&quot;) lang: String = &quot;en&quot;&#10;    ): CurrentWeatherResponse&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_humidity.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_humidity.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;!-- Пустой файл-заглушка, чтобы удалить ресурс --&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;!-- Файл-заглушка для удаления ресурса --&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_pressure.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_pressure.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;!-- Пустой файл-заглушка, чтобы удалить ресурс --&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;!-- Удалённый файл-заглушка --&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_weather_placeholder.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_weather_placeholder.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#00000000&quot;/&gt;&#10;&lt;/shape&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_wind.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_wind.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#4CAF50&quot;&#10;        android:pathData=&quot;M4,12a8,8 0 0,1 16,0a8,8 0 0,1 -16,0zm2,0a6,6 0 0,0 12,0a6,6 0 0,0 -12,0zm6,-4v4l3,3&quot;/&gt;&#10;&lt;/vector&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/root&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/background&quot;&#10;    tools:context=&quot;.MainActivity&quot;&gt;&#10;&#10;    &lt;!-- Toolbar --&gt;&#10;    &lt;com.google.android.material.appbar.MaterialToolbar&#10;        android:id=&quot;@+id/topAppBar&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;?attr/actionBarSize&quot;&#10;        android:background=&quot;?attr/colorPrimary&quot;&#10;        android:title=&quot;@string/app_name&quot;&#10;        android:titleTextColor=&quot;@android:color/white&quot;&#10;        app:elevation=&quot;4dp&quot; /&gt;&#10;&#10;    &lt;!-- Контент с прокруткой --&gt;&#10;    &lt;androidx.core.widget.NestedScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;!-- Карточка текущей погоды --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardCurrentWeather&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                app:cardCornerRadius=&quot;16dp&quot;&#10;                app:cardElevation=&quot;6dp&quot;&#10;                android:padding=&quot;16dp&quot;&#10;                android:background=&quot;@color/card_bg&quot; &gt;&#10;&#10;&#10;            &lt;LinearLayout&#10;            &lt;LinearLayout&#10;            &lt;LinearLayout&#10;            &lt;LinearLayout&#10;            &lt;LinearLayout&#10;            &lt;LinearLayout&#10;            &lt;LinearLayout&#10;            &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                        app:tint=&quot;@color/white&quot;&#10;                    android:gravity=&quot;center_horizontal&quot;&gt;&#10;                        app:tint=&quot;@color/white&quot;&#10;&#10;                        app:tint=&quot;@color/white&quot;&#10;                    &lt;ImageView&#10;                        app:tint=&quot;@color/white&quot;&#10;                        android:id=&quot;@+id/imgCurrentWeatherIcon&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:textSize=&quot;64sp&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:textSize=&quot;64sp&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:textSize=&quot;64sp&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:textSize=&quot;64sp&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:text=&quot;Clear Sky&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:textSize=&quot;20sp&quot; /&gt;&#10;                        android:textSize=&quot;20sp&quot; /&gt;&#10;                        android:textSize=&quot;20sp&quot; /&gt;&#10;                        android:textSize=&quot;20sp&quot; /&gt;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:textSize=&quot;64sp&quot;&#10;                        android:text=&quot;London, UK&quot;&#10;                        android:textColor=&quot;@android:color/darker_gray&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:textSize=&quot;20sp&quot; /&gt;&#10;                        android:id=&quot;@+id/tvHumidity&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Влажность: 60%&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvPressure&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Давление: 1012 гПа&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:textSize=&quot;16sp&quot; /&gt;&#10;                        android:textSize=&quot;16sp&quot; /&gt;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvWindSpeed&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Ветер: 5 м/с&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:textSize=&quot;16sp&quot; /&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/root&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/background&quot;&#10;    tools:context=&quot;.MainActivity&quot;&gt;&#10;&#10;    &lt;!-- Toolbar --&gt;&#10;    &lt;com.google.android.material.appbar.MaterialToolbar&#10;        android:id=&quot;@+id/topAppBar&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;?attr/actionBarSize&quot;&#10;        android:background=&quot;?attr/colorPrimary&quot;&#10;        android:title=&quot;@string/app_name&quot;&#10;        android:titleTextColor=&quot;@android:color/white&quot;&#10;        app:elevation=&quot;4dp&quot; /&gt;&#10;&#10;    &lt;!-- Контент с прокруткой --&gt;&#10;    &lt;androidx.core.widget.NestedScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;!-- Карточка текущей погоды --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/cardCurrentWeather&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                app:cardCornerRadius=&quot;20dp&quot;&#10;                app:cardElevation=&quot;8dp&quot;&#10;                android:background=&quot;@android:color/white&quot;&#10;                android:padding=&quot;24dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:gravity=&quot;center_horizontal&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:id=&quot;@+id/imgCurrentWeatherIcon&quot;&#10;                        android:layout_width=&quot;80dp&quot;&#10;                        android:layout_height=&quot;80dp&quot;&#10;                        android:contentDescription=&quot;@string/current_weather_icon&quot;&#10;                        android:src=&quot;@drawable/ic_sunny&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvCurrentTemp&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;20°&quot;&#10;                        android:textColor=&quot;#222222&quot;&#10;                        android:textSize=&quot;56sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvCurrentCondition&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Ясно&quot;&#10;                        android:textColor=&quot;#444444&quot;&#10;                        android:textSize=&quot;22sp&quot;&#10;                        android:layout_marginTop=&quot;4dp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvLocation&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Москва&quot;&#10;                        android:textColor=&quot;#888888&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:orientation=&quot;horizontal&quot;&#10;                        android:gravity=&quot;center&quot;&#10;                        android:layout_marginTop=&quot;12dp&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/tvHumidity&quot;&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Влажность: 60%&quot;&#10;                            android:textColor=&quot;#444444&quot;&#10;                            android:textSize=&quot;16sp&quot;&#10;                            android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/tvPressure&quot;&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Давление: 1012 гПа&quot;&#10;                            android:textColor=&quot;#444444&quot;&#10;                            android:textSize=&quot;16sp&quot;&#10;                            android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/tvWindSpeed&quot;&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Ветер: 5 м/с&quot;&#10;                            android:textColor=&quot;#444444&quot;&#10;                            android:textSize=&quot;16sp&quot; /&gt;&#10;                    &lt;/LinearLayout&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Заголовок для почасового прогноза --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/hourly_forecast&quot;&#10;                android:textColor=&quot;@android:color/white&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;!-- Горизонтальный RecyclerView для 5-часового прогноза --&gt;&#10;            &lt;androidx.recyclerview.widget.RecyclerView&#10;                android:id=&quot;@+id/rvHourly&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;24dp&quot;&#10;                android:overScrollMode=&quot;never&quot;&#10;                android:scrollbars=&quot;horizontal&quot; /&gt;&#10;&#10;            &lt;!-- Заголовок для недельного прогноза --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/weekly_forecast&quot;&#10;                android:textColor=&quot;@android:color/white&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;!-- Вертикальный RecyclerView для недельного прогноза --&gt;&#10;            &lt;androidx.recyclerview.widget.RecyclerView&#10;                android:id=&quot;@+id/rvWeekly&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:nestedScrollingEnabled=&quot;false&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/androidx.core.widget.NestedScrollView&gt;&#10;&#10;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_hourly_forecast.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_hourly_forecast.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&#10;    app:cardBackgroundColor=&quot;@color/card_bg&quot;&gt;&#10;        android:orientation=&quot;vertical&quot;&#10;&#10;    android:layout_width=&quot;80dp&quot;&#10;    android:layout_width=&quot;80dp&quot;&#10;    android:layout_margin=&quot;6dp&quot;&#10;    app:cardCornerRadius=&quot;16dp&quot;&#10;    app:cardElevation=&quot;6dp&quot;&#10;    app:cardBackgroundColor=&quot;@color/card_bg&quot;&gt;&#10;    app:cardBackgroundColor=&quot;@color/card_bg&quot;&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:padding=&quot;8dp&quot;&gt;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:padding=&quot;8dp&quot;&gt;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:padding=&quot;8dp&quot;&gt;&#10;            android:textColor=&quot;@android:color/white&quot;&#10;            android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imgIcon&quot;&#10;            android:layout_width=&quot;40dp&quot;&#10;            android:layout_height=&quot;40dp&quot;&#10;            android:textColor=&quot;@android:color/white&quot;&#10;            app:tint=&quot;@android:color/white&quot;&#10;            android:src=&quot;@drawable/ic_sunny&quot; /&gt;&#10;            android:textColor=&quot;@android:color/white&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;    &lt;/LinearLayout&gt;&#10;            android:textColor=&quot;@android:color/white&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;wrap_content&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;8dp&quot;&#10;    app:cardCornerRadius=&quot;18dp&quot;&#10;    app:cardElevation=&quot;8dp&quot;&#10;    android:backgroundTint=&quot;#F5F7FA&quot;&gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:layout_width=&quot;160dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:padding=&quot;12dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvHour&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;12:00&quot;&#10;            android:textColor=&quot;#222222&quot;&#10;            android:textSize=&quot;15sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;/&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imgIcon&quot;&#10;            android:layout_width=&quot;40dp&quot;&#10;            android:layout_height=&quot;40dp&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@id/tvHour&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;&#10;            android:contentDescription=&quot;@string/current_weather_icon&quot;&#10;            android:src=&quot;@drawable/ic_launcher_foreground&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvTemp&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;18°&quot;&#10;            android:textColor=&quot;#FF9800&quot;&#10;            android:textSize=&quot;20sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@id/imgIcon&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            android:layout_marginTop=&quot;4dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvFeelsLike&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Ощущается: 16°&quot;&#10;            android:textColor=&quot;#607D8B&quot;&#10;            android:textSize=&quot;13sp&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@id/tvTemp&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvPrecip&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Осадки: 20%&quot;&#10;            android:textColor=&quot;#2196F3&quot;&#10;            android:textSize=&quot;13sp&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@id/tvFeelsLike&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvWind&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Ветер: 3 м/с&quot;&#10;            android:textColor=&quot;#4CAF50&quot;&#10;            android:textSize=&quot;13sp&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@id/tvFeelsLike&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/weather_card.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/weather_card.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;16dp&quot;&#10;    app:cardCornerRadius=&quot;12dp&quot;&#10;    app:cardElevation=&quot;6dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvCity&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Город&quot;&#10;            android:textSize=&quot;20sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/ivWeatherIcon&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:src=&quot;@drawable/ic_weather_placeholder&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvTemperature&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;+20°C&quot;&#10;                android:textSize=&quot;36sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:layout_marginStart=&quot;16dp&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvDescription&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Ясно&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvHumidity&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;Влажность: 60%&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvPressure&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;Давление: 1012 гПа&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvWindSpeed&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Ветер: 5 м/с&quot;&#10;            android:layout_marginTop=&quot;4dp&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>