<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.TopacAdemy_android&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ui.detail.DetailActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:label=&quot;@string/title_activity_detail&quot;&#10;            android:theme=&quot;@style/Theme.TopacAdemy_android&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.TopacAdemy_android&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ui.detail.DetailActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:label=&quot;@string/title_activity_detail&quot;&#10;            android:theme=&quot;@style/Theme.TopacAdemy_android&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.HomeActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot; /&gt;&#10;        &lt;!-- ...остальные активности... --&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/HomeActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/HomeActivity.kt" />
              <option name="updatedContent" value="package com.example.topacademy_android&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import androidx.appcompat.app.AppCompatActivity&#10;import android.widget.Toast&#10;&#10;class HomeActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_home)&#10;&#10;        val btnWeather = findViewById&lt;Button&gt;(R.id.btnWeather)&#10;        val btnCalculator = findViewById&lt;Button&gt;(R.id.btnCalculator)&#10;&#10;        btnWeather.setOnClickListener {&#10;            // Переход к погодному экрану (MainActivity)&#10;            val intent = Intent(this, MainActivity::class.java)&#10;            startActivity(intent)&#10;        }&#10;&#10;        btnCalculator.setOnClickListener {&#10;            // Заглушка для калькулятора&#10;            Toast.makeText(this, &quot;Калькулятор в разработке&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/WeeklyForecast.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/WeeklyForecast.kt" />
              <option name="updatedContent" value="package com.example.topacademy_android&#10;&#10;data class WeeklyForecast(&#10;    val day: String,&#10;    val minTemp: Int,&#10;    val maxTemp: Int,&#10;    val iconCode: String?,&#10;    val description: String?,&#10;    val precip: Int?,&#10;    val wind: Double?&#10;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/ApiKeys.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/ApiKeys.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;object ApiKeys {&#10;    const val OPEN_WEATHER = &quot;7bda70b6c3d8e85ea794b243d26d1fe5&quot;&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;object ApiKeys {&#10;    const val OPEN_WEATHER = &quot;8451d3a5d9ac315e24150c8667d8683f&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/OneCallResponse.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/OneCallResponse.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import com.google.gson.annotations.SerializedName&#10;&#10;data class OneCallResponse(&#10;    @SerializedName(&quot;hourly&quot;) val hourly: List&lt;HourlyForecast&gt;?,&#10;    @SerializedName(&quot;daily&quot;) val daily: List&lt;DailyForecast&gt;?&#10;)&#10;&#10;data class HourlyForecast(&#10;    @SerializedName(&quot;dt&quot;) val dt: Long,&#10;    @SerializedName(&quot;temp&quot;) val temp: Double,&#10;    @SerializedName(&quot;weather&quot;) val weather: List&lt;OneCallWeatherDescription&gt;&#10;)&#10;&#10;data class DailyForecast(&#10;    @SerializedName(&quot;dt&quot;) val dt: Long,&#10;    @SerializedName(&quot;temp&quot;) val temp: Temp,&#10;    @SerializedName(&quot;weather&quot;) val weather: List&lt;OneCallWeatherDescription&gt;&#10;)&#10;&#10;data class Temp(&#10;    @SerializedName(&quot;day&quot;) val day: Double,&#10;    @SerializedName(&quot;min&quot;) val min: Double,&#10;    @SerializedName(&quot;max&quot;) val max: Double&#10;)&#10;&#10;data class OneCallWeatherDescription(&#10;    @SerializedName(&quot;main&quot;) val main: String?,&#10;    @SerializedName(&quot;description&quot;) val description: String?&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import com.google.gson.annotations.SerializedName&#10;&#10;data class OneCallResponse(&#10;    @SerializedName(&quot;hourly&quot;) val hourly: List&lt;HourlyForecast&gt;?,&#10;    @SerializedName(&quot;daily&quot;) val daily: List&lt;DailyForecast&gt;?&#10;)&#10;&#10;data class HourlyForecast(&#10;    @SerializedName(&quot;dt&quot;) val dt: Long,&#10;    @SerializedName(&quot;temp&quot;) val temp: Double,&#10;    @SerializedName(&quot;weather&quot;) val weather: List&lt;OneCallWeatherDescription&gt;&#10;)&#10;&#10;data class DailyForecast(&#10;    @SerializedName(&quot;dt&quot;) val dt: Long,&#10;    @SerializedName(&quot;temp&quot;) val temp: Temp,&#10;    @SerializedName(&quot;weather&quot;) val weather: List&lt;OneCallWeatherDescription&gt;&#10;)&#10;&#10;data class Temp(&#10;    @SerializedName(&quot;day&quot;) val day: Double,&#10;    @SerializedName(&quot;min&quot;) val min: Double,&#10;    @SerializedName(&quot;max&quot;) val max: Double&#10;)&#10;&#10;data class OneCallWeatherDescription(&#10;    @SerializedName(&quot;main&quot;) val main: String?,&#10;    @SerializedName(&quot;description&quot;) val description: String?,&#10;    @SerializedName(&quot;icon&quot;) val icon: String?&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/WeatherApi.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/data/WeatherApi.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;interface WeatherApi {&#10;    @GET(&quot;forecast&quot;)&#10;    suspend fun getForecast(&#10;        @Query(&quot;q&quot;) city: String,&#10;        @Query(&quot;units&quot;) units: String = &quot;metric&quot;,&#10;        @Query(&quot;lang&quot;) lang: String = &quot;en&quot;&#10;    ): WeatherResponse&#10;&#10;    @GET(&quot;weather&quot;)&#10;    suspend fun getCurrentWeather(&#10;        @Query(&quot;q&quot;) city: String,&#10;        @Query(&quot;units&quot;) units: String = &quot;metric&quot;,&#10;        @Query(&quot;lang&quot;) lang: String = &quot;en&quot;&#10;    ): CurrentWeatherResponse&#10;&#10;    @GET(&quot;3.0/onecall&quot;)&#10;    suspend fun getOneCallForecast(&#10;        @Query(&quot;lat&quot;) lat: Double,&#10;        @Query(&quot;lon&quot;) lon: Double,&#10;        @Query(&quot;exclude&quot;) exclude: String = &quot;minutely,alerts&quot;,&#10;        @Query(&quot;units&quot;) units: String = &quot;metric&quot;,&#10;        @Query(&quot;lang&quot;) lang: String = &quot;en&quot;&#10;    ): OneCallResponse&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.data&#10;&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;interface WeatherApi {&#10;    @GET(&quot;forecast&quot;)&#10;    suspend fun getForecast(&#10;        @Query(&quot;q&quot;) city: String,&#10;        @Query(&quot;units&quot;) units: String = &quot;metric&quot;,&#10;        @Query(&quot;lang&quot;) lang: String = &quot;en&quot;&#10;    ): WeatherResponse&#10;&#10;    @GET(&quot;weather&quot;)&#10;    suspend fun getCurrentWeather(&#10;        @Query(&quot;q&quot;) city: String,&#10;        @Query(&quot;units&quot;) units: String = &quot;metric&quot;,&#10;        @Query(&quot;lang&quot;) lang: String = &quot;en&quot;&#10;    ): CurrentWeatherResponse&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/domain/WeatherRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/domain/WeatherRepository.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.feature_forecast.domain&#10;&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.OneCallResponse&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;&#10;interface WeatherRepository {&#10;    suspend fun getCurrentWeather(&#10;        city: String,&#10;        units: String = &quot;metric&quot;,&#10;        lang: String = &quot;en&quot;&#10;    ): CurrentWeatherResponse&#10;&#10;    suspend fun getForecast(&#10;        city: String,&#10;        units: String = &quot;metric&quot;,&#10;        lang: String = &quot;en&quot;&#10;    ): WeatherResponse&#10;&#10;    suspend fun getOneCallForecastMoscow(&#10;        units: String = &quot;metric&quot;,&#10;        lang: String = &quot;ru&quot;&#10;    ): OneCallResponse&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.domain&#10;&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;&#10;interface WeatherRepository {&#10;    suspend fun getCurrentWeather(&#10;        city: String,&#10;        units: String = &quot;metric&quot;,&#10;        lang: String = &quot;en&quot;&#10;    ): CurrentWeatherResponse&#10;&#10;    suspend fun getForecast(&#10;        city: String,&#10;        units: String = &quot;metric&quot;,&#10;        lang: String = &quot;en&quot;&#10;    ): WeatherResponse&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/presentation/ForecastItemToHourly.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/presentation/ForecastItemToHourly.kt" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.presentation&#10;&#10;import com.example.topacademy_android.feature_forecast.data.ForecastItem&#10;&#10;// Преобразование ForecastItem в HourlyForecast&#10;fun ForecastItemToHourly(item: ForecastItem): HourlyForecast {&#10;    return HourlyForecast(&#10;        hour = item.dt_txt.substring(11, 16),&#10;        temp = item.main.temp.toInt(),&#10;        iconCode = item.weather.firstOrNull()?.icon&#10;    )&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/presentation/WeatherViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/topacademy_android/feature_forecast/presentation/WeatherViewModel.kt" />
              <option name="originalContent" value="package com.example.topacademy_android.feature_forecast.presentation&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.LiveData&#10;import com.example.topacademy_android.feature_forecast.domain.WeatherRepository&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.OneCallResponse&#10;import kotlinx.coroutines.launch&#10;&#10;class WeatherViewModel(private val repository: WeatherRepository) : ViewModel() {&#10;    private val _currentWeather = MutableLiveData&lt;CurrentWeatherResponse&gt;()&#10;    val currentWeather: LiveData&lt;CurrentWeatherResponse&gt; = _currentWeather&#10;&#10;    private val _forecast = MutableLiveData&lt;WeatherResponse&gt;()&#10;    val forecast: LiveData&lt;WeatherResponse&gt; = _forecast&#10;&#10;    private val _error = MutableLiveData&lt;String&gt;()&#10;    val error: LiveData&lt;String&gt; = _error&#10;&#10;    private val _oneCallForecast = MutableLiveData&lt;OneCallResponse&gt;()&#10;    val oneCallForecast: LiveData&lt;OneCallResponse&gt; = _oneCallForecast&#10;&#10;    fun fetchCurrentWeather(city: String, units: String = &quot;metric&quot;, lang: String = &quot;en&quot;) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val response = repository.getCurrentWeather(city, units, lang)&#10;                _currentWeather.value = response&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun fetchForecast(city: String, units: String = &quot;metric&quot;, lang: String = &quot;en&quot;) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val response = repository.getForecast(city, units, lang)&#10;                _forecast.value = response&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun fetchMoscowOneCallForecast(units: String = &quot;metric&quot;, lang: String = &quot;ru&quot;) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val response = repository.getOneCallForecastMoscow(units, lang)&#10;                _oneCallForecast.value = response&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.topacademy_android.feature_forecast.presentation&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.LiveData&#10;import com.example.topacademy_android.feature_forecast.domain.WeatherRepository&#10;import com.example.topacademy_android.feature_forecast.data.CurrentWeatherResponse&#10;import com.example.topacademy_android.feature_forecast.data.WeatherResponse&#10;import kotlinx.coroutines.launch&#10;&#10;class WeatherViewModel(private val repository: WeatherRepository) : ViewModel() {&#10;    private val _currentWeather = MutableLiveData&lt;CurrentWeatherResponse&gt;()&#10;    val currentWeather: LiveData&lt;CurrentWeatherResponse&gt; = _currentWeather&#10;&#10;    private val _forecast = MutableLiveData&lt;WeatherResponse&gt;()&#10;    val forecast: LiveData&lt;WeatherResponse&gt; = _forecast&#10;&#10;    private val _error = MutableLiveData&lt;String&gt;()&#10;    val error: LiveData&lt;String&gt; = _error&#10;&#10;    fun fetchCurrentWeather(city: String, units: String = &quot;metric&quot;, lang: String = &quot;en&quot;) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val response = repository.getCurrentWeather(city, units, lang)&#10;                _currentWeather.value = response&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;&#10;    fun fetchForecast(city: String = &quot;Москва&quot;, units: String = &quot;metric&quot;, lang: String = &quot;ru&quot;) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val response = repository.getForecast(city, units, lang)&#10;                _forecast.value = response&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_home.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_home.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:gravity=&quot;center&quot;&#10;    android:background=&quot;@color/background&quot;&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnWeather&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Погода&quot;&#10;        android:layout_marginBottom=&quot;24dp&quot;/&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnCalculator&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Калькулятор&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>